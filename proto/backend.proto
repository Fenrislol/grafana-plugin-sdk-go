syntax = "proto3";
package pluginv2;

//-----------------------------------------------
// Base
//-----------------------------------------------

message PluginConfig {
  int64 id = 1;
  int64 orgId = 2;
  string name = 3;
  string type = 4;
  string url = 5;
  string jsonData = 6;
  map<string,string> decryptedSecureJsonData = 7;
}

message TimeRange {
  string fromRaw = 1;
  string toRaw = 2;
  int64 fromEpochMs = 3;
  int64 toEpochMs = 4;
}


//-----------------------------------------------
// QUERY
//-----------------------------------------------

message QueryRequest {
  // Plugin Configuration
  PluginConfig config = 1;

  // Environment info
  map<string,string> headers = 2;

  // List of queries
  repeated DataQuery queries = 3;
}

message DataQuery {
  string refId = 1;
  int64 maxDataPoints = 2;
  int64 intervalMs = 3;
  TimeRange timeRange = 4; // NOTE: this moved from QueryRequest in v1
  string json = 5; // Arbitrary structure (model?  modelJson in v1)
}

message QueryResponse {
  // Arrow encoded DataFrames
  // Each frame encodes its own: Errors, meta, and refId
  repeated bytes data = 1;

  // Additional response metadata
  map<string,string> headers = 2;
}



//-----------------------------------------------
// HTTP style request
//-----------------------------------------------

message HandleRequest {
  // Plugin Configuration
  PluginConfig config = 1;

  // Environment info
  map<string,string> headers = 2;

  // HTTP Style parameters
  string method = 3; // GET/POST/DELETE/etc
  string path = 4;   // (with params?)
  bytes body = 5;    // assume string unless header says otherwise?
}

message HandleResponse {
  int64 code = 1;  // Match HTTP status codes
  bytes body = 2;
  map<string,string> headers = 3;
}


//-----------------------------------------------
// General RPC Service
//-----------------------------------------------

service BackendPlugin {
  // Security???
  //   /api/plugin/$pluginId/request
  // Any logged in (or if anon allowed)
  // With enterprise:
  //  1. team access to datasource
  //  2. pass along user info
  //
  // out-of-the-box expected endpoints:
  // GET system/api > OpenAPI documented endpoints
  // GET system/health > healthcheck
  // GET system/metrics > return prometheus style metrics text
  rpc Request(HandleRequest) returns (HandleResponse);

  // Well typed query interface
  rpc Query(QueryRequest) returns (QueryResponse);
}

