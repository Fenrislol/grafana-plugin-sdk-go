syntax = "proto3";
package pluginv2;

//-----------------------------------------------
// Common
//-----------------------------------------------

message PluginConfig {
  int64 id = 1;
  int64 orgId = 2;
  string name = 3;
  string type = 4;
  string url = 5;
  string jsonData = 6;
  map<string,string> decryptedSecureJsonData = 7;
}

message TimeRange {
  string fromRaw = 1;
  string toRaw = 2;
  int64 fromEpochMs = 3;
  int64 toEpochMs = 4;
}


//-----------------------------------------------
// QUERY
//-----------------------------------------------

message QueryRequest {
  // Plugin Configuration
  PluginConfig config = 1;

  // Environment info
  map<string,string> headers = 2;

  // List of queries
  repeated DataQuery queries = 3;
}

message DataQuery {
  string refId = 1;
  int64 maxDataPoints = 2;
  int64 intervalMs = 3;
  TimeRange timeRange = 4; // NOTE: this moved from QueryRequest in v1
  string json = 5; // Arbitrary structure (model?  modelJson in v1)
}

message QueryResponse {
  // Arrow encoded DataFrames
  // Each frame encodes its own: Errors, meta, and refId
  repeated bytes data = 1;

  // Additional response metadata
  map<string,string> headers = 2;
}


//-----------------------------------------------
// HTTP style request
//-----------------------------------------------

message PluginRequest {
  // Plugin Configuration
  PluginConfig config = 1;

  // Environment info
  map<string,string> headers = 2;

  // HTTP Style parameters
  string method = 3; // GET/POST/DELETE/etc
  string path = 4;   // (with params?)
  bytes body = 5;    // assume string unless header says otherwise?
}

message PluginResponse {
  int64 code = 1;  // Match HTTP status codes
  bytes body = 2;
  map<string,string> headers = 3;
}


//-----------------------------------------------
// All Backend Plugins Implement
//-----------------------------------------------

service BackendPlugin {
  // Security???
  //   /api/plugin/$pluginId/request
  // Any logged in (or if anon allowed)
  // With enterprise:
  //  1. team access to datasource
  //  2. pass along user info
  //
  // out-of-the-box expected endpoints:
  // GET system/api > OpenAPI documented endpoints
  // GET system/health > healthcheck
  // GET system/metrics > return prometheus style metrics text
  rpc Request(PluginRequest) returns (PluginResponse);

  // Well typed query interface
  rpc Query(QueryRequest) returns (QueryResponse); // TODO -- currently things die at response >4mb... need a better solution
}


//-----------------------------------------------
// Allow plugins to access other plugins
// Only allow this for some plugins?  GEL only
//
// ???? How does the backend know the PluginConfig????
//-----------------------------------------------

service GrafanaPlatform {
  rpc PlatformPluginRequest(PluginRequest) returns (PluginResponse);

  rpc PlatformPluginQuery(QueryRequest) returns (QueryResponse);
}


//-----------------------------------------------------------------
// Streaming support aimed to support similar features to STOMP
// consider Apache Flight for more complex/standard
//-----------------------------------------------------------------

message StreamingRequest {
  int64 pluginId = 1; // match the id from connect request

  // Environment info
  map<string,string> headers = 1;

  // The topic we are talking to
  string topic = 2;
  
  // The message
  string body = 3;  

  // Flag if the user is already listening
  boolean subscribed = 4;
}

message StreamingMessage {
  int64 pluginId = 1;
  string topic = 2; // will be broadcast to eveyone listening to this app|ds + topic
  string message = 3; // JSON Blob
}

service StreamingPlugin {
  // Called by grafana before the first request
  // Grafana server will set up a websocket that will broadcast to all listeners
  rpc Connect(PluginConfig) returns (stream StreamingMessage);
  
  // If the message is not empty, send that to the user
  // throwing an error will make sure the user is not subscribed 
  rpc Request(StreamingRequest) returns (StreamingMessage)

  // Stop streaming to that instance, returns the number of open connections
  rpc Disconnect(int64) returns (int64);
}

